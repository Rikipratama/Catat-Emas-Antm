<!-- 
  File: laporan.html
  Deskripsi: Halaman untuk menampilkan laporan data investasi dengan paginasi.
-->
<div class="card">
    <h2>Laporan Investasi</h2>

    <div id="laporan-feedback" class="feedback"></div>

    <div class="controls">
        <label for="rows-per-page">Tampilkan:</label>
        <select id="rows-per-page" onchange="loadInvestasiData(1)">
            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="25">25</option>
        </select>
        <span>entri per halaman</span>
    </div>

    <div class="table-container">
        <table id="laporan-table">
            <thead>
                <tr>
                    <th>Tgl Beli</th>
                    <th>Berat</th>
                    <th>Nominal Beli</th>
                    <th>HPP/Gram</th>
                    <th>Harga/Gr Saat Ini</th>
                    <th>Estimasi Jual</th>
                    <th>Profit/Loss</th>
                    <th>%</th>
                    <th class="aksi">Aksi</th>
                </tr>
            </thead>
            <tbody id="laporan-tbody">
                <!-- Data akan diisi oleh JavaScript -->
            </tbody>
        </table>
    </div>
    
    <div id="pagination-controls"></div>
</div>

<style>
    .card {
        background: var(--card-bg);
        padding: 25px 30px;
        border-radius: 12px;
        box-shadow: var(--shadow);
    }
    .controls {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 0.9em;
        color: #64748b;
    }
    .controls select {
        padding: 5px 10px;
        border-radius: 6px;
        border: 1px solid var(--border-color);
        background-color: #f8fafc;
    }
    .table-container { overflow-x: auto; }
    #laporan-table {
        width: 100%;
        border-collapse: collapse;
        white-space: nowrap;
    }
    #laporan-table th, #laporan-table td {
        padding: 12px 15px;
        border-bottom: 1px solid var(--border-color);
        text-align: left;
        vertical-align: middle;
    }
    #laporan-table th {
        background-color: #f1f5f9;
        font-weight: 600;
        font-size: 0.9em;
        text-transform: uppercase;
    }
    #laporan-table td { font-size: 0.95em; }
    #laporan-table tbody tr:last-child td { border-bottom: none; }
    #laporan-table .aksi { text-align: center; }
    .btn-sm {
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 0.9em;
        cursor: pointer;
        border: none;
        color: white;
    }
    .btn-edit { background-color: var(--warning-color); }
    .btn-delete { background-color: var(--error-color); }
    #pagination-controls {
        margin-top: 25px;
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid var(--border-color);
    }
    .pagination-btn {
        background-color: var(--card-bg);
        border: 1px solid var(--border-color);
        padding: 8px 14px;
        margin: 0 4px;
        cursor: pointer;
        border-radius: 6px;
    }
    .pagination-btn.active {
        background-color: var(--accent-color);
        color: var(--primary-bg);
        border-color: var(--accent-color);
    }
    .feedback {
        margin-bottom: 15px;
        padding: 12px;
        border-radius: 8px;
        text-align: center;
        display: none;
    }
    .feedback.success { background-color: #dcfce7; color: #166534; display: block; }
    .feedback.error { background-color: #fee2e2; color: #991b1b; display: block; }
</style>

<script>
    function showLaporanFeedback(message, isSuccess) {
        const feedbackDiv = document.getElementById('laporan-feedback');
        if (feedbackDiv) {
            feedbackDiv.textContent = message;
            feedbackDiv.className = isSuccess ? 'feedback success' : 'feedback error';
            setTimeout(() => { feedbackDiv.style.display = 'none'; }, 4000);
        }
    }

    function loadInvestasiData(page = 1) {
        showLoader(true);
        const rowsPerPage = document.getElementById('rows-per-page').value;
        const tbody = document.getElementById('laporan-tbody');
        
        tbody.innerHTML = '<tr><td colspan="9" style="text-align:center; padding: 40px; color: #94a3b8;">Memuat data...</td></tr>';
        
        google.script.run
            .withSuccessHandler(result => {
                showLoader(false);

                // --- LOGIKA BARU ---
                // 1. Tangani jika server mengembalikan pesan error secara eksplisit.
                if (result && result.error) {
                    tbody.innerHTML = `<tr><td colspan="9" style="text-align:center; padding: 40px; color:var(--error-color);"><b>Terjadi Kesalahan:</b> ${result.error}</td></tr>`;
                    return; // Hentikan fungsi
                }
                
                // 2. Tangani jika 'result' null atau tidak valid (sebagai pengaman)
                if (!result) {
                    tbody.innerHTML = `<tr><td colspan="9" style="text-align:center; padding: 40px; color:var(--error-color);"><b>Gagal memuat data:</b> Server tidak memberikan respon yang valid.</td></tr>`;
                    return;
                }

                const { data, totalPages, currentPage } = result;
                tbody.innerHTML = ''; 

                if (!data || data.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="9" style="text-align:center; padding: 40px;">Tidak ada data untuk ditampilkan.</td></tr>';
                } else {
                    data.forEach(row => {
                        const tr = document.createElement('tr');
                        const profitLoss = row[7];
                        const percentage = row[8];
                        const profitColor = profitLoss < 0 ? 'var(--error-color)' : 'var(--success-color)';
                        const formatRp = (num) => 'Rp ' + Number(num).toLocaleString('id-ID');

                        tr.innerHTML = `
                            <td>${row[1]}</td>
                            <td>${row[2]} gr</td>
                            <td>${formatRp(row[3])}</td>
                            <td>${formatRp(row[4])}</td>
                            <td>${formatRp(row[5])}</td>
                            <td>${formatRp(row[6])}</td>
                            <td style="color:${profitColor}; font-weight:600;">${formatRp(profitLoss)}</td>
                            <td style="color:${profitColor}; font-weight:600;">${percentage.toFixed(2)}%</td>
                            <td class="aksi">
                                <button class="btn-sm btn-edit" onclick="handleEdit(${row[0]})" title="Edit"><i class="fas fa-edit"></i></button>
                                <button class="btn-sm btn-delete" onclick="handleDelete(${row[0]})" title="Hapus"><i class="fas fa-trash"></i></button>
                            </td>`;
                        tbody.appendChild(tr);
                    });
                }
                
                renderPagination(totalPages, currentPage);
            })
            .withFailureHandler(err => {
                showLoader(false);
                tbody.innerHTML = `<tr><td colspan="9" style="text-align:center; padding: 40px; color:var(--error-color);"><b>Error Klien:</b> ${err.message}</td></tr>`;
            })
            .getInvestasiData(page, parseInt(rowsPerPage, 10));
    }

    function renderPagination(totalPages, currentPage) {
        const container = document.getElementById('pagination-controls');
        if (!container) return;
        container.innerHTML = '';
        if (totalPages <= 1) return;

        for (let i = 1; i <= totalPages; i++) {
            const btn = document.createElement('button');
            btn.textContent = i;
            btn.className = 'pagination-btn' + (i === currentPage ? ' active' : '');
            btn.onclick = () => loadInvestasiData(i);
            container.appendChild(btn);
        }
    }

    function handleEdit(rowNumber) {
        globalState.recordToEdit = rowNumber; 
        const formPageLink = document.querySelector('a[onclick*="form.html"]');
        loadPage('form.html', formPageLink);
    }

    function handleDelete(rowNumber) {
        showConfirm('Apakah Anda yakin ingin menghapus data ini?', (confirmed) => {
            if (confirmed) {
                showLoader(true);
                google.script.run
                    .withSuccessHandler(response => {
                        showLoader(false);
                        showLaporanFeedback(response, true);
                        loadInvestasiData(1);
                    })
                    .withFailureHandler(err => {
                        showLoader(false);
                        showLaporanFeedback('Error: ' + err.message, false);
                    })
                    .deleteInvestasi(rowNumber);
            }
        });
    }

    loadInvestasiData(1);
</script>
